name: Deployment
on:
  workflow_call:
    inputs:
      dockerfile_location:
        required: false
        type: string
        default: '.'
      templates_location:
        required: false
        type: string
        default: 'deployment/'
      environment:
        required: true
        type: string
      environment_url:
        required: true
        type: string
      release:
        default: 'false'
        required: false
        type: string
      envfile_to_env:
        default: 'false'
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      CLUSTER_NAME:
        required: true
      ECR_REGISTRY:
        required: true

jobs:
  Deploying:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/qflash/deployment-workflow:latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment_url }}
    steps:
      - name: Parse authorized users for deployment action
        if: ${{ (inputs.release == 'true' || inputs.environment == 'production') }}
        uses: kanga333/json-array-builder@main
        id: array
        with:
          cmd: echo "${{ vars.DEPLOYMENT_USERS }}"
          separator: space
      - name: Cancel unauthorized deployment
        uses: andymckay/cancel-action@0.3
        if: ${{ (inputs.release == 'true' || inputs.environment == 'production') && contains(steps.array.outputs.build, github.actor) == false }}
      - uses: actions/checkout@v3
      - name: Set ECT pretag
        id: ecr-pretag
        if: ${{ !(inputs.release == 'true' || inputs.environment == 'production') }}
        run: |
          echo "ecr_pretag=dev-"
      - name: Set environment variables
        id: vars
        run: |
          echo "project_version=$(cat .version)" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "repo_name=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ secrets.ECR_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "ecr_tag=${{ secrets.ECR_REGISTRY }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest=${{ secrets.ECR_REGISTRY }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}latest" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest_escaped=${{ secrets.ECR_REGISTRY }}\/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.2
      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2.2.0
        with:
          validation_depth: 10
          version: ${{ steps.vars.outputs.project_version }}
          path: ./CHANGELOG.md
      - name: Config environment file
        if: ${{ inputs.envfile_to_env != 'false' }}
        run: |
          mv ${{ inputs.envfile_to_env }} app/.env
          rm -r app/.env.*
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t "${{ steps.vars.outputs.ecr_tag }}" ${{ inputs.dockerfile_location }}
          docker push "${{ steps.vars.outputs.ecr_tag }}"
      - name: Install and configure kubeclt
        run: aws eks update-kubeconfig --name "${{ secrets.CLUSTER_NAME }}"
      - name: Deploy to K8s
        run: |
          sed -i '0,/^\([[:space:]]*image: *\).*/s//\1${{ steps.vars.outputs.ecr_tag_latest_escaped }}/;' ${{ inputs.templates_location}}${{ inputs.environment }}.yml
          kubectl apply -f ${{ inputs.templates_location}}${{ inputs.environment }}.yml
      - name: Create a GitHub release
        if: ${{ inputs.release == 'true' }}
        uses: ncipollo/release-action@v1.11.1
        with:
          tag: v${{ steps.vars.outputs.project_version }}
          name: v${{ steps.vars.outputs.project_version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

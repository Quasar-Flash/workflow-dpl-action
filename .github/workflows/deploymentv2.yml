name: Deployment
on:
  workflow_call:
    inputs:
      dockerfile_location:
        required: false
        type: string
        default: "."
      templates_location:
        required: false
        type: string
        default: "deployment/"
      environment:
        required: true
        type: string
      environment_url:
        required: true
        type: string
      release:
        default: "false"
        required: false
        type: string
      envfile_to_env:
        default: "false"
        required: false
        type: string
      namespace:
        default: "dev"
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID_DEVOPS:
        required: true
      AWS_SECRET_ACCESS_KEY_DEVOPS:
        required: true
      AWS_ACCESS_KEY_ID_DEV:
        required: true
      AWS_DEVOPS_REGION:
        required: true
      AWS_ECR_REGION:
        required: true
      AWS_SECRET_ACCESS_KEY_DEV:
        required: true
      CLUSTER_NAME_DEV:
        required: true
      ECR_REGISTRY_DEVOPS:
        required: true
jobs:
  Deploying:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment_url }}
    steps:
      - name: Verifica se o usuário tem permissão para executar a ação
        if: ${{ (inputs.release == 'true' || inputs.environment == 'production') }}
        uses: kanga333/json-array-builder@main
        id: array
        with:
          cmd: echo "${{ vars.DEPLOYMENT_USERS }}"
          separator: space
      - name: Cancela ação desautorizada para o usuário
        uses: andymckay/cancel-action@0.3
        if: ${{ (inputs.release == 'true' || inputs.environment == 'production') && contains(steps.array.outputs.build, github.actor) == false }}
      - name: Checkout do repositório
        uses: actions/checkout@v3
      - name: Instala o Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configura as credenciais da AWS (DevOps)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVOPS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVOPS }}
          aws-region: ${{ secrets.AWS_DEVOPS_REGION }}
      - name: Autentica com o AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.5.2
      - name: Verifica a tag para upload no ECR
        id: ecr-pretag
        if: ${{ inputs.environment != 'production' }}
        run: echo "ecr_pretag=${{ inputs.namespace }}-" >> $GITHUB_OUTPUT
      - name: Atribui variáveis de ambiente para realizar os uploads
        id: vars
        run: |
          echo "project_version=$(cat .version)" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "repo_name=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ secrets.ECR_REGISTRY_DEVOPS }}" >> $GITHUB_OUTPUT
          echo "ecr_tag=${{ secrets.ECR_REGISTRY_DEVOPS }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest=${{ secrets.ECR_REGISTRY_DEVOPS }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}latest" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest_escaped=${{ secrets.ECR_REGISTRY_DEVOPS }}\/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Recupera o histórico da versão para a criação da release
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2.2.0
        with:
          validation_depth: 10
          version: ${{ steps.vars.outputs.project_version }}
          path: ./CHANGELOG.md
      - name: Configura o arquivo .env estático de acordo com o ambiente
        if: ${{ inputs.envfile_to_env != 'false' }}
        run: |
          mv ${{ inputs.envfile_to_env }} app/.env
          rm -r app/.env.*
      - name: Constrói a imagem e faz upload para o AWS ECR
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.dockerfile_location }}
          push: true
          tags: "${{ steps.vars.outputs.ecr_tag_latest }},${{ steps.vars.outputs.ecr_tag }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "ENVIRONMENT=production"
      - name: Configura as credenciais da AWS (Dev)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}
      - name: Instala e configura o kubeclt
        run: aws eks update-kubeconfig --name "${{ secrets.CLUSTER_NAME_DEV }}"
      - name: Checkout do repositório de templates
        uses: actions/checkout@master
        with:
          repository: ${{ vars.EKS_TEMPLATES_REPO }}
          path: "target"
          token: ${{ secrets.EKS_TEMPLATES_CHECKOUT_PAT }}
      - name: Resolve template correspondente à aplicação
        id: template
        run: |
          if test -f "target/qflash-dev/${{ inputs.namespace }}/${{ steps.vars.outputs.repo_name }}.yml"; then
            echo "eks_template=target/qflash-dev/${{ inputs.namespace }}/${{ steps.vars.outputs.repo_name }}.yml" >> $GITHUB_OUTPUT
          else
            echo "eks_template=${{ inputs.templates_location}}${{ inputs.environment }}.yml" >> $GITHUB_OUTPUT
          fi
      - name: Prepara o template incluindo a imagem com o git sha
        run: |
          sed -i '/^\([[:space:]]*image: *\).*/s//\1${{ steps.vars.outputs.ecr_tag_latest_escaped }}/;' ${{ steps.template.outputs.eks_template }}
      - name: Aplica o template no K8S
        run: kubectl apply -f ${{ steps.template.outputs.eks_template }}
      - name: Cria a release no Github para a versão
        if: ${{ inputs.release == 'true' }}
        uses: ncipollo/release-action@v1.11.1
        with:
          tag: v${{ steps.vars.outputs.project_version }}
          name: v${{ steps.vars.outputs.project_version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Purge old cache
        uses: MyAlbum/purge-cache@v2
        with:
          accessed: true # Purge caches by their last accessed time (default)
          created: false # Purge caches by their created time (default)
          max-age: 604800 # Leave only caches accessed in the last 7 days (default)

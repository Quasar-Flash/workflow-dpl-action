name: Deploy DEV
on:
  workflow_call:
    inputs:
      dockerfile_location:
        required: false
        type: string
        default: "."
      templates_location:
        required: false
        type: string
        default: "deployment/"
      environment:
        default: "development"
        required: false
        type: string
      environment_url:
        required: true
        type: string
      envfile_to_env:
        default: "false"
        required: false
        type: string
      namespace:
        default: "dev"
        required: false
        type: string
      app_location:
        default: "app/"
        required: false
        type: string
    secrets:
      AWS_DEVOPS_ROLE_NAME:
        required: true
      AWS_DEVOPS_REGION:
        required: true
      AWS_DEVOPS_ECR:
        required: true
      AWS_DEV_CLUSTER_ARN:
        required: true
      AWS_DEV_ROLE_NAME:
        required: true
      AWS_DEV_REGION:
        required: true
      AWS_DEV_CLUSTER_NAME:
        required: true
jobs:
  Deploying:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      actions: write
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment_url }}
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@master
      - name: Instala o Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configura as credenciais da AWS (DevOps)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_DEVOPS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEVOPS_ROLE_NAME }}
      - name: Autentica com o AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Verifica a tag para upload no ECR
        id: ecr-pretag
        if: ${{ inputs.environment != 'production' }}
        run: echo "ecr_pretag=${{ inputs.namespace }}-" >> $GITHUB_OUTPUT
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Atribui variáveis de ambiente para realizar os uploads
        id: vars
        run: |
          echo "branch_name=${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_OUTPUT
          echo "project_version=$(cat .version)" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "repo_name=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_OUTPUT
          echo "ecr_registry=${{ secrets.AWS_DEVOPS_ECR }}" >> $GITHUB_OUTPUT
          echo "ecr_tag=${{ secrets.AWS_DEVOPS_ECR }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest=${{ secrets.AWS_DEVOPS_ECR }}/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}latest" >> $GITHUB_OUTPUT
          echo "ecr_tag_latest_escaped=${{ secrets.AWS_DEVOPS_ECR }}\/${GITHUB_REPOSITORY#*\/}:${{ steps.ecr-pretag.outputs.ecr_pretag }}${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Configura o arquivo .env estático de acordo com o ambiente
        if: ${{ inputs.envfile_to_env != 'false' }}
        run: |
          mv ${{ inputs.envfile_to_env }} ${{ inputs.app_location }}.env
          rm ${{ inputs.app_location }}.env.*
      - name: Constrói a imagem e faz upload para o AWS ECR
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.dockerfile_location }}
          push: true
          tags: "${{ steps.vars.outputs.ecr_tag_latest }},${{ steps.vars.outputs.ecr_tag }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "BRANCH_NAME=${{ steps.vars.outputs.branch_name }}"
            "ENVIRONMENT=production"
      - name: Configura as credenciais da AWS (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_DEV_REGION }}
          role-to-assume: ${{ secrets.AWS_DEV_ROLE_NAME }}
      - name: Instala e configura o kubeclt
        run: |
          aws eks update-kubeconfig --name ${{ secrets.AWS_DEV_CLUSTER_NAME }} --region ${{ secrets.AWS_DEV_REGION }}
      - name: Checkout do repositório de templates
        uses: actions/checkout@master
        with:
          repository: ${{ vars.EKS_TEMPLATES_REPO }}
          path: "target"
          token: ${{ secrets.EKS_TEMPLATES_CHECKOUT_PAT }}
      - name: Resolve template correspondente à aplicação
        id: template
        run: |
          if test -f "target/services/${{ steps.vars.outputs.repo_name }}/template-dev.yml"; then
            echo "eks_template=target/services/${{ steps.vars.outputs.repo_name }}/template-dev.yml" >> $GITHUB_OUTPUT
            echo "eks_template_result=tmp/template-dev.yml" >> $GITHUB_OUTPUT
          else
            echo "eks_template=target/services/template.yml" >> $GITHUB_OUTPUT
            echo "eks_template_result=tmp/template.yml" >> $GITHUB_OUTPUT
          fi
      - name: Aplica o template no K8S
        if: success() || failure()
        run: |
          ./target/bin/ytt -f ${{ steps.template.outputs.eks_template }} -f target/services/defaults.dev.yml -f target/services/${{ steps.vars.outputs.repo_name }}/values.dev.yml --output-files tmp/
          sed -i '/^\([[:space:]]*image: *\).*/s//\1${{ steps.vars.outputs.ecr_tag_latest_escaped }}/;' ${{ steps.template.outputs.eks_template_result }}
          kubectl apply -f ${{ steps.template.outputs.eks_template_result }}
      - name: Purge old cache
        uses: MyAlbum/purge-cache@v2
        with:
          debug: true
          max-age: 604800
